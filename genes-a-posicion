#!/usr/bin/python3

chroms = [str(c) for c in range(1,24)] + ['X','Y']

def position_dict(gene_location_filename):
    """Read a gene_dict and load it as a dictionary"""
    gene_dict = {}
    try:
        fsock = open(gene_location_filename)
    except:
        exit(1)

    for row in fsock:
        row = row.strip()
        (chrom, start, end, symbol) = row.split("\t")
        if chrom in chroms:
            gene_dict[symbol] = (chrom, start, end)
    fsock.close()
    return gene_dict

def gene_position(gene_symbol, gene_dict):
    if gene_symbol in gene_dict:
        chrom, start, end = gene_dict[gene_symbol]
        return "hs{}\t{}\t{}".format(chrom, start, end)
    else:
        return None

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser('Transformar s√≠mbolo de gen a formato de circos.')
    parser.add_argument("gene_dict", help='The file containing: "chrom <tab> start <tab> end <tab> symbol"')
    parser.add_argument("net", help='The file containing: "gene <tab> gene"')
    args = parser.parse_args()

    # red gene positions
    positions = position_dict(args.gene_dict)

    # read log fold changes
    try:
        fsock = open(args.net)
    except:
        exit(1)

    for line in fsock:
         line = line.strip()
         gene1, gene2 = line.split("\t")
         p1 = gene_position(gene1, positions)
         p2 = gene_position(gene2, positions)
         if p1 and p2:
             print("{}\t{}".format(p1, p2))
